# 애플리케이션 실행시 설정 파일
# - Key=Value 형태의 단순 텍스트
# >> 서버 설정
# >> DATABASE 연결 정보 설정
# >> JPA/Hibernate 설정
# >> 로깅/이메일/파일 업로드/보안 등 런타임 환경설정
spring.application.name=k5_iot_springboot

server.port=8080

spring.datasource.url=jdbc:mysql://localhost:3306/k5_iot_springboot
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.show-sql=true
# 기본값 false
# : 콘솔에 실행되는 SQL 로그 출력 (SQL 확인용으로 유용 - 개발단계에서만 사용, 배포단계에서는 없애기)

spring.jpa.hibernate.ddl-auto=update
# JPA 가 엔티티를 보고 DB 스키마를 어떻게 관리할지 결정
# - update 옵션: 변경 사항만 저장 (개발 단계에서만 유용! 운영시 제거 권장)
#       >> 가능한 범위 내에서 ADD/ALTER 등을 시도해 스키마를 엔티티에 맞춰 수정

# spring.jpa.hibernate.ddl-auto=validate --> missing column [test_id] in table [test] / validate 설정하면 너무 많은 오류가 남..

# spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver -> spring 2.0 이상부터는 생략 가능, DBMS 가 2개이상 혼합되는 경우는 필수 명시

# ==== Spring Web Email ====
# Spring Boot에서 이메일을 보내기 위해 사용하는 SMTP 설정
# Gmail의 SMTP 서버(smtp.gmail.com)를 사용해서 이메일을 보내도록 Spring Boot 애플리케이션을 구성

# spring.mail.host=smtp.gmail.com
# Gmail의 SMTP 서버 호스트 주소, 이메일을 보낼 때 이 서버를 사용

# spring.mail.port=587
# spring.mail.username=ses9133@gmail.com
# spring.mail.password=${MAIL_PASSWORD}

# spring.mail.properties.mail.smtp.auth=true
# SMTP 서버 인증을 사용한다는 설정
# Gmail은 인증이 필수이기 때문에 true로 설정

# spring.mail.properties.mail.smtp.starttls.enable=true
# STARTTLS를 활성화, 이 설정은 암호화된 연결을 위해 필요

# 아래 설정들은 네트워크 지연이나 서버 응답이 없을 때 애플리케이션이 멈추지 않도록 도와줍
# spring.mail.properties.mail.smtp.connectiontimeout=5000
# spring.mail.properties.mail.smtp.timeout=5000
# spring.mail.properties.mail.smtp.writetimeout=5000