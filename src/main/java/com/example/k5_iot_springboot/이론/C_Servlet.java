package com.example.k5_iot_springboot.이론;
/*
    === 서블릿 구조(톰캣 기반) ===

    1. 서블릿이란 ?
        : 자바로 만든 웹 프로그램
        - 클라이언트의 요청에 따라 동적으로 서버를 처리하는 자바 클래스
        - 웹서버(WAS)에 배치
        - HTTP 프로토콜을 통해 클라이언트의 요청을 받고, 자바 코드를 통해 웹 페이지 생성 또는 데이터 처리후 응답 반환

        +) JAVA EE(Enterprise Edition) 플랫폼의 일부
            >> 대부분 자바 웹 프레임워크들이 Servlet 기술을 기반으로 동작

    2. 서블릿 동작 구조
        : 요청 >> 컨테이너 >> 서블릿 >> 비즈니스 로직 >> 응답

        [ 클라이언트(브라우저) ] HTTP 요청
            |
        [ 웹 서버 / 서블릿 컨테이터 ] 톰캣, 제티 등
            |
            |   : URL 매핑 ("/hello" 경로로 들어오면 -> HelloServlet 클래스로 매핑을 시킴)
            |
        [ 서블릿 ]  service() 호출 - doGet()/doPost() 메서드를 통해 필요한 작업 수행
            |
        [ 서비스 | DAT | 리포지토리 | DB ] 비즈니스 로직, 데이터 접근
            |
            |   : 결과를 Model 로 전달
            |
        [ 서블릿 ] JSP/템플릿에 전달 또는 직접 HTML 작성 & HTTP 응답 바디 작성
            |
        [ 클라이언트(브라우저)] 클라이언트(브라우저)에 응답 전달

        ==== 서블릿 특징 ====
        1) 서블릿 컨테이너가 서블릿의 생명주기를 관리
            init(): 최초 1회 초기화
            service(): 매 요청마다 호출 >> 내부에서 doGet()/doPost() 등으로 분기
            destroy(): 컨테이터 종료시 정리
       2) 매핑 (web.xml 또는 어노테이션(@WebServlet()) )으로 어떤 URL 이 어떤 서블릿으로 연결되는지 개발자가 명시해야함.
       3) 순수 서블릿은 요청 파싱, 모델 구성, 뷰 렌더링을 개발자가 직저 처리해야함 - 중복 코드 증가

       >> 순수 서블릿의 불편함을 표준화/자동화해주는 프론트 컨트롤러 패턴의 구현이 스프링 MVC 의 DispatcherServlet

*/
public class C_Servlet {
}

